answer: "SELECT * FROM cities;"
level: 
  stage_number: 2
  title: "Select all the things!"
  prompt: "Selecting all the cities"
  database_path: "db/dumps/lvl1.sql"
  answer: "[{\"id\"=>\"1\", \"name\"=>\"New York\", \"population\"=>\"8337000\"}, {\"id\"=>\"2\", \"name\"=>\"Paris\", \"population\"=>\"2211000\"}, {\"id\"=>\"3\", \"name\"=>\"San Francisco\", \"population\"=>\"825000\"}, {\"id\"=>\"4\", \"name\"=>\"London\", \"population\"=>\"8308000\"}, {\"id\"=>\"5\", \"name\"=>\"Moscow\", \"population\"=>\"11500000\"}, {\"id\"=>\"6\", \"name\"=>\"Tokyo\", \"population\"=>\"13230000\"}, {\"id\"=>\"7\", \"name\"=>\"Shanghai\", \"population\"=>\"24000000\"}]"
  level_type: "read"
level_pages:
  - 
    page_number: 1
    content: "<h2>Select all the things!</h2><p>So we figured out how to get a list of city names. Cool beans. But what if we want more information? Enter the <strong>*</strong> character.</p><p><strong>*</strong> is a wildcard character, it matches every column in the table. Telling a table to <em>select *</em> is telling it to get all the things!</p><p> It will return every column and every row! Give it a try!</p><p>Try using a select query with * instead of 'name'. This should return the entire cities table.</p>"
level_schemas: 
  - 
    schema_columns: 
      - 
        column_name: id
        column_type: serial
      - 
        column_name: name
        column_type: varchar(255)
      - 
        column_name: population
        column_type: integer
    table_name: cities