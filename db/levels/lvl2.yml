correct_query: "SELECT * FROM cities;"
level: 
  stage_number: 2
  title: "Select all the things!"
  prompt: "Select every <em>row</em> and <em>column</em> from <code>cities</code> by using <code>*</code>."
  database_path: "db/dumps/lvl1.sql"
  answer: "[{\"name\"=>\"New York\", \"population\"=>\"8337000\"}, {\"name\"=>\"Paris\", \"population\"=>\"2211000\"}, {\"name\"=>\"San Francisco\", \"population\"=>\"825000\"}, {\"name\"=>\"London\", \"population\"=>\"8308000\"}, {\"name\"=>\"Moscow\", \"population\"=>\"11500000\"}, {\"name\"=>\"Tokyo\", \"population\"=>\"13230000\"}, {\"name\"=>\"Shanghai\", \"population\"=>\"24000000\"}]"
  level_type: "read"
default_text: "name            |\n‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\nNew York        |\nParis           |\nSan Francisco   |\nLondon          |\nMoscow          |\nTokyo           |\nShanghai        |\n"
level_pages:
  - 
    page_number: 1
    content: "<p>So we figured out how to get a list of city names. Cool beans. But what if we want more information? Enter the <code>*</code> character.</p><p><code>*</code> is a wildcard character, it matches every column in the table. Telling a table to <code>SELECT *</code> is telling it to get all the things!</p><p> It will return every column and every row! Give it a try!</p><p>Try using a select query with <code>*</code> instead of <code>name</code>. This should return the entire <code>cities</code> table as the result.</p>"
level_schemas: 
  - 
    schema_columns: 
      - 
        column_name: name
        column_type: varchar(255)
      - 
        column_name: population
        column_type: integer
    table_name: cities